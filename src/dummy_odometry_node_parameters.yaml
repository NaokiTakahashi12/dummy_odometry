# MIT License
#
# Copyright (c) 2023 Naoki Takahashi
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

dummy_odometry_node:
  parent_frame_id:
    type: string
    default_value: odom
    validation:
      not_empty<>:
  child_frame_id:
    type: string
    default_value: base_link
    validation:
      not_empty<>:
  require_command_timestamp:
    type: bool
    default_value: true
    description: Require command with timestamp
  update_odometry_frequency:
    type: double
    default_value: 10
    description: Odometry update frequecny (Hz)
    validation:
      gt_eq<>: 0
  wait_command_seconds:
    type: double
    default_value: 2
    description: Wait for velocity command topic time
    validation:
      gt_eq<>: 0
  tf_broadcast:
    type: bool
    default_value: true
    description: Enable TF broadcast
  simulate_odometry_method:
    type: string
    default_value: sum
    description: Simulate command to odometry method
    validation:
      not_empty<>:
      one_of<>:
        -
          - sum
  spring:
    x:
      type: double
      default_value: 0.0
    y:
      type: double
      default_value: 0.0
    z:
      type: double
      default_value: 0.0
    roll:
      type: double
      default_value: 0.0
    pitch:
      type: double
      default_value: 0.0
    yaw:
      type: double
      default_value: 0.0
  dampa:
    x:
      type: double
      default_value: 0.0
    y:
      type: double
      default_value: 0.0
    z:
      type: double
      default_value: 0.0
    roll:
      type: double
      default_value: 0.0
    pitch:
      type: double
      default_value: 0.0
    yaw:
      type: double
      default_value: 0.0
  gaussian_noise:
    x:
      mean:
        type: double
        default_value: 0.0
        description: Gaussian noise mean X axis
      stddev:
        type: double
        default_value: 0.0
        description: Gaussian noise stddev X axis
    y:
      mean:
        type: double
        default_value: 0.0
        description: Gaussian noise mean Y axis
      stddev:
        type: double
        default_value: 0.0
        description: Gaussian noise stddev Y axis
    z:
      mean:
        type: double
        default_value: 0.0
        description: Gaussian noise mean Z axis
      stddev:
        type: double
        default_value: 0.0
        description: Gaussian noise stddev Z axis
    roll:
      mean:
        type: double
        default_value: 0.0
        description: Gaussian noise mean roll axis
      stddev:
        type: double
        default_value: 0.0
        description: Gaussian noise stddev roll axis
    pitch:
      mean:
        type: double
        default_value: 0.0
        description: Gaussian noise mean pitch axis
      stddev:
        type: double
        default_value: 0.0
        description: Gaussian noise stddev pitch axis
    yaw:
      mean:
        type: double
        default_value: 0.0
        description: Gaussian noise mean yaw axis
      stddev:
        type: double
        default_value: 0.0
        description: Gaussian noise stddev yaw axis
